{"uid":"248b3909670030a0","name":"test_refix[user2]","fullName":"test_aaa.TestAPI#test_refix","historyId":"8916ccdb76a5eee3ce3a106e55082d6e","time":{"start":1744720095320,"stop":1744720095513,"duration":193},"status":"failed","statusMessage":"AssertionError: assert 500 == 200","statusTrace":"self = <test_aaa.TestAPI object at 0x00000193713FD5B0>\nuser = 'http://62.234.166.117/prod-api/system/user/189'\n\n    @pytest.mark.parametrize(\"user\", generate_users(10))  # 生成 5 个用例\n    def test_refix(self,user):#进行修改\n    \n        yaml_data = yaml_package.load_yaml(\"add.yaml\")\n    \n        num = random.randint(189, 250)\n        user = f\"http://62.234.166.117/prod-api/system/user/{num}\"\n        result = requests.get(url=user,headers=yaml_data[\"header\"])\n        resp =result.json()\n    \n        datas=resp[\"data\"]\n    \n        nick_name=\"\".join(random.choices(string.ascii_letters + string.digits, k=6))\n        datas[\"nickName\"]=nick_name\n        yaml_data1=yaml_package.load_yaml(\"revise.yaml\")\n        head = yaml_data1[\"header\"]\n        url=yaml_data[\"url\"]\n    \n        print(datas)\n        result =requests.put(url,json=datas,headers=head )\n        resp=result.json()\n        print(resp)\n>       assert resp[\"code\"] == 200\nE       assert 500 == 200\n\ntest_aaa.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_token","time":{"start":1744720093415,"stop":1744720093681,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"pro_post_output","time":{"start":1744720095319,"stop":1744720095319,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200","statusTrace":"self = <test_aaa.TestAPI object at 0x00000193713FD5B0>\nuser = 'http://62.234.166.117/prod-api/system/user/189'\n\n    @pytest.mark.parametrize(\"user\", generate_users(10))  # 生成 5 个用例\n    def test_refix(self,user):#进行修改\n    \n        yaml_data = yaml_package.load_yaml(\"add.yaml\")\n    \n        num = random.randint(189, 250)\n        user = f\"http://62.234.166.117/prod-api/system/user/{num}\"\n        result = requests.get(url=user,headers=yaml_data[\"header\"])\n        resp =result.json()\n    \n        datas=resp[\"data\"]\n    \n        nick_name=\"\".join(random.choices(string.ascii_letters + string.digits, k=6))\n        datas[\"nickName\"]=nick_name\n        yaml_data1=yaml_package.load_yaml(\"revise.yaml\")\n        head = yaml_data1[\"header\"]\n        url=yaml_data[\"url\"]\n    \n        print(datas)\n        result =requests.put(url,json=datas,headers=head )\n        resp=result.json()\n        print(resp)\n>       assert resp[\"code\"] == 200\nE       assert 500 == 200\n\ntest_aaa.py:62: AssertionError","steps":[],"attachments":[{"uid":"439322652a0c1d0e","name":"stdout","source":"439322652a0c1d0e.txt","type":"text/plain","size":592}],"parameters":[],"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"pro_post_output::0","time":{"start":1744720095707,"stop":1744720095708,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"get_token::0","time":{"start":1744720097483,"stop":1744720097483,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"test_aaa"},{"name":"subSuite","value":"TestAPI"},{"name":"host","value":"LAPTOP-AHHKPI8V"},{"name":"thread","value":"1324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_aaa"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"{'userName': 'CPv9X6', 'nickName': 'azsGCX'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"248b3909670030a0.json","parameterValues":["{'userName': 'CPv9X6', 'nickName': 'azsGCX'}"]}